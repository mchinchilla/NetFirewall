#!/usr/sbin/nft -f

flush ruleset

# Define tables and chains for NAT
table ip nat {
    chain prerouting {
        type nat hook prerouting priority -100; policy accept;

        # Port Forwarding for SIP (UDP 5060 for SIP signaling)
        iifname "ens192" ip saddr { 100.100.1.1, 100.100.1.2 } udp dport 5060 dnat to 192.168.9.8:5060
        iifname "ens192" ip saddr { 190.1.100.32/28 } udp dport 5060 dnat to 192.168.9.8:5060


        # RTP ports might range from 10000 to 40000 typically, adjust if different
        iifname "ens192" ip saddr { 100.100.1.1, 100.100.1.2 } udp dport 10000-40000 dnat to 192.168.9.8
        iifname "ens192" ip saddr { 190.1.100.32/28 } udp dport 10000-40000 dnat to 192.168.9.8

        # Port Forwarding rule for PostgreSQL (if still needed)
        iifname "ens192" ip saddr 100.100.3.158 tcp dport 5432 dnat to 192.168.9.90:5432

        # Port Forwarding rule for Jellyfin Service
        iifname "ens192" tcp dport 8096 dnat to 192.168.9.6:8096

    }
    chain postrouting {
        type nat hook postrouting priority 100; policy accept;
        oifname "wg0" ip saddr 192.168.9.0/24 masquerade
        oifname "ens224" ip saddr 192.168.9.0/24 masquerade
        oifname "ens192" ip saddr 192.168.9.0/24 masquerade
    }
}

# Define the filter table with input policy set to drop
table ip filter {
    chain input {
        type filter hook input priority 0; policy drop;
        iif lo accept
        ct state established,related accept

        ip protocol icmp icmp type echo-request limit rate 1/second accept
        ip protocol icmp icmp type echo-request log prefix "ICMP_RATELIMIT: " drop
        ip protocol icmp accept


        # Allow SSH only from LAN (ens256) and specific IPs on WAN interfaces
        iifname "ens256" tcp dport 22 accept  # LAN interface
        iifname { "ens192", "ens224" } ip saddr { 200.100.1.10, 200.100.1.230, 200.100.1.228 } tcp dport ssh accept

        # Rate limit SSH connections (now only applies to the allowed IPs on WAN interfaces)
        #iifname { "ens192", "ens224" } tcp dport ssh ct state new limit rate 15/minute accept
        #iifname { "ens192", "ens224" } tcp dport ssh log prefix "SSH_RATELIMIT: " drop

        iifname { "ens192", "ens224" } tcp dport ssh log prefix "SSH_ACCESS: " drop

        iifname "ens256" ip saddr 192.168.9.0/24 tcp dport 5432 accept  # Postgresql only from LAN

        # General rate limiting for HTTP
        tcp dport { 80, 443 } ct state new limit rate 60/minute accept
        tcp dport { 80, 443 } log prefix "HTTP_RATELIMIT: " drop

        # Drop SYN packets from IPs that send too many SYN requests in a short time
        tcp flags syn tcp option maxseg size 0-536 drop
        tcp flags syn limit rate 10/second accept
        tcp flags syn log prefix "SYN_FLOOD: " drop

        # Block some common scanning ports if not needed
        tcp dport { 135, 139, 445 } log prefix "BLOCKED_SCAN: " drop  # NetBIOS, SMB
        tcp dport { 1433, 3306, 5432 } log prefix "BLOCKED_SCAN: " drop  # Common DB ports
        udp dport { 137, 138 } log prefix "BLOCKED_SCAN: " drop  # NetBIOS

        # Drop invalid packets
        ct state invalid log prefix "INVALID_PACKETS: " drop

    }

    chain forward {
        type filter hook forward priority 0; policy drop;
        ct state established,related accept
        iifname "ens256" oifname { "ens192", "ens224", "wg0" } accept

        # Apply rate limiting and other rules for forwarded traffic
        tcp dport { 80, 443 } ct state new limit rate 60/minute accept
        tcp dport { 80, 443 } log prefix "HTTP_RATELIMIT_FORWARD: " drop

        tcp flags syn tcp option maxseg size 0-536 drop
        tcp flags syn limit rate 10/second accept
        tcp flags syn log prefix "SYN_FLOOD_FORWARD: " drop

        ct state invalid log prefix "INVALID_PACKETS_FORWARD: " drop

        # Allow SIP traffic from WAN to PBX
        iifname "ens192" oifname "ens256" ip daddr 192.168.9.8 udp dport { 5060, 10000-40000 } accept

        # Allow PostgreSQL traffic if still needed
        iifname "ens192" oifname "ens256" ip daddr 192.168.9.90 tcp dport 5432 accept

        log prefix "FORWARD_DROP: "
        drop

    }

    chain output {
        type filter hook output priority 0; policy accept;
    }
}

# Define the mangle table for QoS marking
table ip mangle {
    chain prerouting {
        type filter hook prerouting priority -150; policy accept;

        # Mark all traffic from 192.168.9.x to go through ens192
        #ip saddr { 192.168.9.25,192.168.9.20-192.168.9.22 } meta mark set 0x100
        ip saddr { 192.168.9.0/24 } meta mark set 0x100
        
        # Mark all traffic from 192.168.9.25 to go through ens224
        ip saddr { 192.168.9.145,192.168.9.60-192.168.9.69 } meta mark set 0x200
        

        # Mark all traffic from 192.168.9.145 to go through wg0
        ip saddr { 192.168.9.66, 192.168.9.145 } meta mark set 0x500
        
        # High Priority
        tcp dport { ssh, https, 3389 } accept # SSH, HTTPS, RDP
        udp dport { 5060, 5061, 10000-40000 } accept # VoIP (SIP, RTP)

        # Normal Priority
        tcp dport { 80, 21 } accept # Streaming (HTTP), FTP
        udp dport 80 accept # Streaming (HTTP)
        tcp dport 6881-6889 accept # Torrent (common ports)

        # Low Priority (default)
        ip protocol { tcp, udp } accept # Everything else
    }

    # Apply marks based on priority
    chain postrouting {
        type filter hook postrouting priority 100; policy accept;
        
        # High Priority
        meta mark set 0x100 tcp dport { ssh, https, 3389 }
        meta mark set 0x100 udp dport { 5060, 5061, 10000-40000 }

        # Normal Priority
        meta mark set 0x200 tcp dport { 80, 21 }
        meta mark set 0x200 udp dport 80
        meta mark set 0x200 tcp dport 6881-6889

        # Low Priority (default)
        meta mark set 0x300
    }
}

# QoS for WAN1 (ens192)
table netdev qos-wan1 {
    chain ingress {
        type filter hook ingress device "ens192" priority filter; policy accept;
        meta mark 0x100 accept # High Priority
        meta mark 0x200 accept # Normal Priority
        meta mark 0x300 accept # Low Priority
    }

    chain egress {
        type filter hook egress device "ens192" priority filter; policy accept;
        meta mark 0x100 accept # High Priority
        meta mark 0x200 accept # Normal Priority
        meta mark 0x300 accept # Low Priority
    }
}

# QoS for WAN2 (ens224)
table netdev qos-wan2 {
    chain ingress {
        type filter hook ingress device "ens224" priority filter; policy accept;
        meta mark 0x100 accept # High Priority
        meta mark 0x200 accept # Normal Priority
        meta mark 0x300 accept # Low Priority
    }

    chain egress {
        type filter hook egress device "ens224" priority filter; policy accept;
        meta mark 0x100 accept # High Priority
        meta mark 0x200 accept # Normal Priority
        meta mark 0x300 accept # Low Priority
    }
}